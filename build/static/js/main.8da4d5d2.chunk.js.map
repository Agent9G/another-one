{"version":3,"sources":["assets/another-one.mp4","assets/dj_Khalid_poster.png","assets/another.webm","AnotherOneVid.js","Button.js","Prophecy.js","Firestore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AnotherOneVid","className","playsInline","autoPlay","muted","poster","id","width","height","src","mp4","type","webm","Button","props","onClick","onClickFunction","Prophecy","display","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","App","collection","get","then","querySnapshot","dbData","forEach","doc","quoteString","data","quote","push","console","log","catch","e","React","useState","setIndex","Video","document","getElementById","play","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,6MCmB5BC,MAZf,WAEE,OACE,yBAAKC,UAAU,IACb,2BAAOC,aAAW,EAACC,UAAQ,EAACC,OAAO,EAAMC,OAAQA,IAAQJ,UAAU,gBAAgBK,GAAG,gBAAgBC,MAAM,MAAMC,OAAO,OACvH,4BAAQC,IAAKC,IAAMC,KAAK,cACxB,4BAAQF,IAAKG,IAAOD,KAAK,kBCClBE,MAXf,SAAgBC,GACd,OACE,yBAAKb,UAAU,gBACb,4BAAI,0BAAMA,UAAU,IAAhB,oCACJ,4BAAQA,UAAU,YAAYK,GAAG,aAAaS,QAASD,EAAME,iBAA7D,cCOSC,MAXf,SAAmBH,GACjB,OACE,yBAAKb,UAAU,YACda,EAAMI,U,aCQXC,gBAXuB,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,wCAQT,IAgBeC,EAhBJR,cCuCIS,MAhDf,WAGsBD,EAAGE,WAAW,UAAUC,MAC9BC,KAAK,SAACC,GAClB,IAAMC,EAAS,GACfD,EAAcE,QAAQ,SAACC,GAGrB,IAAMC,EAAeD,EAAIE,OAAOC,MAChCL,EAAOM,KAAKH,KAEdI,QAAQC,IAAIR,KAEXS,MAAO,SAACC,GAAD,OAAOH,QAAQC,IAAI,gBAAiBE,KAdjC,MAmBaC,IAAMC,WAnBnB,mBAmBCC,GAnBD,WA+Bb,OAAS,yBACH7C,UAAY,OAChB,kBACA,EADA,CACSiB,QACP,oBAJK,IAMJ,kBACH,EADG,MAEH,kBACA,EADA,CACOF,gBAnBQ,WACf,IAAM+B,EAAQC,SAASC,eAAe,kBAClB,IAAhBF,EAAM3C,QACR2C,EAAM3C,OAAQ,GAEhB2C,EAAMG,OACNJ,EAAS,MAIF,MC5BSK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCKNC,IAASC,OAAO,kBAAC,EAAD,MAAST,SAASC,eAAe,SD0G3C,kBAAmBS,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.8da4d5d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/another-one.459486ba.mp4\";","module.exports = __webpack_public_path__ + \"static/media/dj_Khalid_poster.9190f8af.png\";","module.exports = __webpack_public_path__ + \"static/media/another.903e6f04.webm\";","import React from 'react';\nimport './App.css';\nimport mp4 from \"./assets/another-one.mp4\";\nimport poster from \"./assets/dj_Khalid_poster.png\";\nimport webm from \"./assets/another.webm\";\n\n\nfunction AnotherOneVid() {\n\n  return (\n    <div className=\"\">\n      <video playsInline autoPlay muted={true} poster={poster} className=\"anotherOneVid\" id=\"anotherOneVid\" width=\"414\" height=\"736\">\n        <source src={mp4}  type='video/mp4' />\n        <source src={webm}  type='video/webm' />\n      </video>\n    </div>\n  );\n}\n\nexport default AnotherOneVid;\n","import React from 'react';\nimport './App.css';\n\nfunction Button(props) {\n  return (\n    <div className=\"btncontainer\">\n      <h4><span className=\"\">Click below to request blessing</span></h4>\n      <button className=\"centerbtn\" id=\"blessUpbtn\" onClick={props.onClickFunction} >Bless Up</button>\n    </div>\n );\n}\n\n\n\nexport default Button;\n","import React from 'react';\nimport './App.css';\n\nfunction Prophecy (props) {\n  return (\n    <div className=\"prophecy\">\n    {props.display}\n    </div>\n  )\n};\n\n\n\n\nexport default Prophecy;\n","import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAkKGS1HEfboD0kC6v6YNy1eleY2BW1w9c\",\n  authDomain: \"another-one-98483.firebaseapp.com\",\n  databaseURL: \"https://another-one-98483.firebaseio.com\",\n  projectId: \"another-one-98483\",\n  storageBucket: \"\",\n  messagingSenderId: \"582734948815\",\n  appId: \"1:582734948815:web:5c66502206eb61c4\"\n};\n\n//initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\n\n//initialize db\nconst db = firebase.firestore();\n\n// //test adding data\n// db.collection('quotes').add({\n//   quote: \"test\",\n//   from: \"test\",\n//   length: \"test\",\n//   id: \"test\"\n// })\n// .then(function(docRef) {\n//   console.log(\"Document written with ID: \", docRef.id);\n// })\n// .catch(function(e) {\n//   console.log(\"Error adding document: \", e);\n// });\n\nexport default db;\n","import React from 'react';\nimport './App.css';\nimport AnotherOneVid from './AnotherOneVid';\nimport Button from './Button';\nimport Prophecy from './Prophecy';\nimport db from './Firestore.js';\n\n\n\nfunction App() {\n\n\n  let promiseDBData = db.collection(\"quotes\").get();\n  promiseDBData.then((querySnapshot) => {\n    const dbData = [];\n    querySnapshot.forEach((doc) => {\n      // doc.data() is never undefined for query doc snapshots\n      // console.log(doc.id, \" => \", doc.data() );\n      const quoteString = (doc.data().quote);\n      dbData.push(quoteString);\n    });\n    console.log(dbData);\n    // return dbData;\n  }).catch ((e) => console.log(\"data not here\", e));\n\n\n\n\n  const [index, setIndex] = React.useState();\n\n  const Seleckta = () => {\n    const Video = document.getElementById('anotherOneVid');\n    if (Video.muted !== false) { //if this is not muted\n      Video.muted = false;\n    }\n    Video.play();\n    setIndex(3);\n\n  }\n\n  return ( <\n    div className = \"App\" >\n    <\n    Prophecy display = {\n      'Hell Yeeeaaaaah'\n    }\n    /> <\n    AnotherOneVid / >\n    <\n    Button onClickFunction = {\n      Seleckta\n    }\n    /> < /\n    div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import db from './Firestore.js';     //you have this here just to test adding to db\n\n\n// //test adding data\n// db.collection('quotes').add({\n//   quote: \"test4\",\n//   from: \"test4\",\n//   length: \"test4\",\n//   id: \"test4\"\n// })\n// .then(function(docRef) {\n//   console.log(\"Document written with ID: \", docRef.id);\n// })\n// .catch(function(e) {\n//   console.log(\"Error adding document: \", e);\n// });\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}